// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: src/StreamingServices/Spotify/canvas-protos/canvas.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
export const protobufPackage = "";
function createBaseCanvasRequest() {
    return { tracks: [] };
}
export const CanvasRequest = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.tracks) {
            CanvasRequest_Track.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCanvasRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tracks.push(CanvasRequest_Track.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tracks: globalThis.Array.isArray(object?.tracks)
                ? object.tracks.map((e) => CanvasRequest_Track.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tracks?.length) {
            obj.tracks = message.tracks.map((e) => CanvasRequest_Track.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CanvasRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCanvasRequest();
        message.tracks = object.tracks?.map((e) => CanvasRequest_Track.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCanvasRequest_Track() {
    return { trackUri: "" };
}
export const CanvasRequest_Track = {
    encode(message, writer = new BinaryWriter()) {
        if (message.trackUri !== "") {
            writer.uint32(10).string(message.trackUri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCanvasRequest_Track();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.trackUri = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { trackUri: isSet(object.trackUri) ? globalThis.String(object.trackUri) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.trackUri !== "") {
            obj.trackUri = message.trackUri;
        }
        return obj;
    },
    create(base) {
        return CanvasRequest_Track.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCanvasRequest_Track();
        message.trackUri = object.trackUri ?? "";
        return message;
    },
};
function createBaseCanvasResponse() {
    return { canvases: [] };
}
export const CanvasResponse = {
    encode(message, writer = new BinaryWriter()) {
        for (const v of message.canvases) {
            CanvasResponse_Canvas.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCanvasResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.canvases.push(CanvasResponse_Canvas.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            canvases: globalThis.Array.isArray(object?.canvases)
                ? object.canvases.map((e) => CanvasResponse_Canvas.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.canvases?.length) {
            obj.canvases = message.canvases.map((e) => CanvasResponse_Canvas.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return CanvasResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCanvasResponse();
        message.canvases = object.canvases?.map((e) => CanvasResponse_Canvas.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCanvasResponse_Canvas() {
    return { id: "", canvasUrl: "", trackUri: "", artist: undefined, otherId: "", canvasUri: "" };
}
export const CanvasResponse_Canvas = {
    encode(message, writer = new BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.canvasUrl !== "") {
            writer.uint32(18).string(message.canvasUrl);
        }
        if (message.trackUri !== "") {
            writer.uint32(42).string(message.trackUri);
        }
        if (message.artist !== undefined) {
            CanvasResponse_Canvas_Artist.encode(message.artist, writer.uint32(50).fork()).join();
        }
        if (message.otherId !== "") {
            writer.uint32(74).string(message.otherId);
        }
        if (message.canvasUri !== "") {
            writer.uint32(90).string(message.canvasUri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCanvasResponse_Canvas();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.canvasUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.trackUri = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.artist = CanvasResponse_Canvas_Artist.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.otherId = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.canvasUri = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            canvasUrl: isSet(object.canvasUrl) ? globalThis.String(object.canvasUrl) : "",
            trackUri: isSet(object.trackUri) ? globalThis.String(object.trackUri) : "",
            artist: isSet(object.artist) ? CanvasResponse_Canvas_Artist.fromJSON(object.artist) : undefined,
            otherId: isSet(object.otherId) ? globalThis.String(object.otherId) : "",
            canvasUri: isSet(object.canvasUri) ? globalThis.String(object.canvasUri) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.canvasUrl !== "") {
            obj.canvasUrl = message.canvasUrl;
        }
        if (message.trackUri !== "") {
            obj.trackUri = message.trackUri;
        }
        if (message.artist !== undefined) {
            obj.artist = CanvasResponse_Canvas_Artist.toJSON(message.artist);
        }
        if (message.otherId !== "") {
            obj.otherId = message.otherId;
        }
        if (message.canvasUri !== "") {
            obj.canvasUri = message.canvasUri;
        }
        return obj;
    },
    create(base) {
        return CanvasResponse_Canvas.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCanvasResponse_Canvas();
        message.id = object.id ?? "";
        message.canvasUrl = object.canvasUrl ?? "";
        message.trackUri = object.trackUri ?? "";
        message.artist = (object.artist !== undefined && object.artist !== null)
            ? CanvasResponse_Canvas_Artist.fromPartial(object.artist)
            : undefined;
        message.otherId = object.otherId ?? "";
        message.canvasUri = object.canvasUri ?? "";
        return message;
    },
};
function createBaseCanvasResponse_Canvas_Artist() {
    return { artistUri: "", artistName: "", artistImgUrl: "" };
}
export const CanvasResponse_Canvas_Artist = {
    encode(message, writer = new BinaryWriter()) {
        if (message.artistUri !== "") {
            writer.uint32(10).string(message.artistUri);
        }
        if (message.artistName !== "") {
            writer.uint32(18).string(message.artistName);
        }
        if (message.artistImgUrl !== "") {
            writer.uint32(26).string(message.artistImgUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCanvasResponse_Canvas_Artist();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.artistUri = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.artistName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.artistImgUrl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            artistUri: isSet(object.artistUri) ? globalThis.String(object.artistUri) : "",
            artistName: isSet(object.artistName) ? globalThis.String(object.artistName) : "",
            artistImgUrl: isSet(object.artistImgUrl) ? globalThis.String(object.artistImgUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.artistUri !== "") {
            obj.artistUri = message.artistUri;
        }
        if (message.artistName !== "") {
            obj.artistName = message.artistName;
        }
        if (message.artistImgUrl !== "") {
            obj.artistImgUrl = message.artistImgUrl;
        }
        return obj;
    },
    create(base) {
        return CanvasResponse_Canvas_Artist.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCanvasResponse_Canvas_Artist();
        message.artistUri = object.artistUri ?? "";
        message.artistName = object.artistName ?? "";
        message.artistImgUrl = object.artistImgUrl ?? "";
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=canvas.js.map