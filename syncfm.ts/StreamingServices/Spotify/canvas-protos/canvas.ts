// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: src/StreamingServices/Spotify/canvas-protos/canvas.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface CanvasRequest {
  tracks: CanvasRequest_Track[];
}

export interface CanvasRequest_Track {
  /** spotify:track:5osCClSjGplWagDsJmyivf */
  trackUri: string;
}

export interface CanvasResponse {
  canvases: CanvasResponse_Canvas[];
}

export interface CanvasResponse_Canvas {
  /** ef3bc2ac86ba4a39b2cddff19dca884a */
  id: string;
  /** https://canvaz.scdn.co/upload/artist/6i1GVNJCyyssRwXmnaeEFH/video/ef3bc2ac86ba4a39b2cddff19dca884a.cnvs.mp4 */
  canvasUrl: string;
  /** spotify:track:5osCClSjGplWagDsJmyivf */
  trackUri: string;
  artist:
    | CanvasResponse_Canvas_Artist
    | undefined;
  /** 957a9be5e5c1b9ef1ac1c96b7cebf396 */
  otherId: string;
  /** spotify:canvas:1OuybAWK7XOQMG725ZtFwG */
  canvasUri: string;
}

export interface CanvasResponse_Canvas_Artist {
  /** spotify:artist:3E61SnNA9oqKP7hI0K3vZv */
  artistUri: string;
  /** CALVO */
  artistName: string;
  /** https://i.scdn.co/image/2d7b0ebe1e06c74f5c6b9a2384d746673051241d */
  artistImgUrl: string;
}

function createBaseCanvasRequest(): CanvasRequest {
  return { tracks: [] };
}

export const CanvasRequest: MessageFns<CanvasRequest> = {
  encode(message: CanvasRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tracks) {
      CanvasRequest_Track.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tracks.push(CanvasRequest_Track.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasRequest {
    return {
      tracks: globalThis.Array.isArray(object?.tracks)
        ? object.tracks.map((e: any) => CanvasRequest_Track.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CanvasRequest): unknown {
    const obj: any = {};
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => CanvasRequest_Track.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasRequest>, I>>(base?: I): CanvasRequest {
    return CanvasRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasRequest>, I>>(object: I): CanvasRequest {
    const message = createBaseCanvasRequest();
    message.tracks = object.tracks?.map((e) => CanvasRequest_Track.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCanvasRequest_Track(): CanvasRequest_Track {
  return { trackUri: "" };
}

export const CanvasRequest_Track: MessageFns<CanvasRequest_Track> = {
  encode(message: CanvasRequest_Track, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackUri !== "") {
      writer.uint32(10).string(message.trackUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasRequest_Track {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasRequest_Track();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackUri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasRequest_Track {
    return { trackUri: isSet(object.trackUri) ? globalThis.String(object.trackUri) : "" };
  },

  toJSON(message: CanvasRequest_Track): unknown {
    const obj: any = {};
    if (message.trackUri !== "") {
      obj.trackUri = message.trackUri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasRequest_Track>, I>>(base?: I): CanvasRequest_Track {
    return CanvasRequest_Track.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasRequest_Track>, I>>(object: I): CanvasRequest_Track {
    const message = createBaseCanvasRequest_Track();
    message.trackUri = object.trackUri ?? "";
    return message;
  },
};

function createBaseCanvasResponse(): CanvasResponse {
  return { canvases: [] };
}

export const CanvasResponse: MessageFns<CanvasResponse> = {
  encode(message: CanvasResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.canvases) {
      CanvasResponse_Canvas.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.canvases.push(CanvasResponse_Canvas.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasResponse {
    return {
      canvases: globalThis.Array.isArray(object?.canvases)
        ? object.canvases.map((e: any) => CanvasResponse_Canvas.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CanvasResponse): unknown {
    const obj: any = {};
    if (message.canvases?.length) {
      obj.canvases = message.canvases.map((e) => CanvasResponse_Canvas.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasResponse>, I>>(base?: I): CanvasResponse {
    return CanvasResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasResponse>, I>>(object: I): CanvasResponse {
    const message = createBaseCanvasResponse();
    message.canvases = object.canvases?.map((e) => CanvasResponse_Canvas.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCanvasResponse_Canvas(): CanvasResponse_Canvas {
  return { id: "", canvasUrl: "", trackUri: "", artist: undefined, otherId: "", canvasUri: "" };
}

export const CanvasResponse_Canvas: MessageFns<CanvasResponse_Canvas> = {
  encode(message: CanvasResponse_Canvas, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.canvasUrl !== "") {
      writer.uint32(18).string(message.canvasUrl);
    }
    if (message.trackUri !== "") {
      writer.uint32(42).string(message.trackUri);
    }
    if (message.artist !== undefined) {
      CanvasResponse_Canvas_Artist.encode(message.artist, writer.uint32(50).fork()).join();
    }
    if (message.otherId !== "") {
      writer.uint32(74).string(message.otherId);
    }
    if (message.canvasUri !== "") {
      writer.uint32(90).string(message.canvasUri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasResponse_Canvas {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasResponse_Canvas();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.canvasUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.trackUri = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.artist = CanvasResponse_Canvas_Artist.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.otherId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.canvasUri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasResponse_Canvas {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      canvasUrl: isSet(object.canvasUrl) ? globalThis.String(object.canvasUrl) : "",
      trackUri: isSet(object.trackUri) ? globalThis.String(object.trackUri) : "",
      artist: isSet(object.artist) ? CanvasResponse_Canvas_Artist.fromJSON(object.artist) : undefined,
      otherId: isSet(object.otherId) ? globalThis.String(object.otherId) : "",
      canvasUri: isSet(object.canvasUri) ? globalThis.String(object.canvasUri) : "",
    };
  },

  toJSON(message: CanvasResponse_Canvas): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.canvasUrl !== "") {
      obj.canvasUrl = message.canvasUrl;
    }
    if (message.trackUri !== "") {
      obj.trackUri = message.trackUri;
    }
    if (message.artist !== undefined) {
      obj.artist = CanvasResponse_Canvas_Artist.toJSON(message.artist);
    }
    if (message.otherId !== "") {
      obj.otherId = message.otherId;
    }
    if (message.canvasUri !== "") {
      obj.canvasUri = message.canvasUri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasResponse_Canvas>, I>>(base?: I): CanvasResponse_Canvas {
    return CanvasResponse_Canvas.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasResponse_Canvas>, I>>(object: I): CanvasResponse_Canvas {
    const message = createBaseCanvasResponse_Canvas();
    message.id = object.id ?? "";
    message.canvasUrl = object.canvasUrl ?? "";
    message.trackUri = object.trackUri ?? "";
    message.artist = (object.artist !== undefined && object.artist !== null)
      ? CanvasResponse_Canvas_Artist.fromPartial(object.artist)
      : undefined;
    message.otherId = object.otherId ?? "";
    message.canvasUri = object.canvasUri ?? "";
    return message;
  },
};

function createBaseCanvasResponse_Canvas_Artist(): CanvasResponse_Canvas_Artist {
  return { artistUri: "", artistName: "", artistImgUrl: "" };
}

export const CanvasResponse_Canvas_Artist: MessageFns<CanvasResponse_Canvas_Artist> = {
  encode(message: CanvasResponse_Canvas_Artist, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.artistUri !== "") {
      writer.uint32(10).string(message.artistUri);
    }
    if (message.artistName !== "") {
      writer.uint32(18).string(message.artistName);
    }
    if (message.artistImgUrl !== "") {
      writer.uint32(26).string(message.artistImgUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CanvasResponse_Canvas_Artist {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCanvasResponse_Canvas_Artist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.artistUri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.artistName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.artistImgUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CanvasResponse_Canvas_Artist {
    return {
      artistUri: isSet(object.artistUri) ? globalThis.String(object.artistUri) : "",
      artistName: isSet(object.artistName) ? globalThis.String(object.artistName) : "",
      artistImgUrl: isSet(object.artistImgUrl) ? globalThis.String(object.artistImgUrl) : "",
    };
  },

  toJSON(message: CanvasResponse_Canvas_Artist): unknown {
    const obj: any = {};
    if (message.artistUri !== "") {
      obj.artistUri = message.artistUri;
    }
    if (message.artistName !== "") {
      obj.artistName = message.artistName;
    }
    if (message.artistImgUrl !== "") {
      obj.artistImgUrl = message.artistImgUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CanvasResponse_Canvas_Artist>, I>>(base?: I): CanvasResponse_Canvas_Artist {
    return CanvasResponse_Canvas_Artist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CanvasResponse_Canvas_Artist>, I>>(object: I): CanvasResponse_Canvas_Artist {
    const message = createBaseCanvasResponse_Canvas_Artist();
    message.artistUri = object.artistUri ?? "";
    message.artistName = object.artistName ?? "";
    message.artistImgUrl = object.artistImgUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
